{"ast":null,"code":"var _jsxFileName = \"/Users/zhangfangce/Desktop/CIS-550/website/client/src/pages/GenrePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // For navigation\nimport \"../style/GenrePage.css\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenrePage() {\n  _s();\n  const [artists, setArtists] = useState([]); // State for artist options\n  const [selectedArtist, setSelectedArtist] = useState(\"\"); // Selected artist\n  const [topGenres, setTopGenres] = useState([]); // State for fetched top genres\n  const [error, setError] = useState(\"\"); // Error message\n  const history = useHistory(); // For navigation\n\n  // Function to fetch artists for the dropdown\n  const fetchArtists = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/artists\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch artists. Status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Assuming artists are in an array\n      if (Array.isArray(data)) {\n        setArtists(data); // Populate the dropdown options\n      } else {\n        throw new Error(\"Invalid response structure: Expected array of artists\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching artists:\", error);\n      setError(\"Failed to load artists.\");\n    }\n  };\n\n  // Function to fetch top genres for a selected artist\n  const fetchTopGenresByArtist = async () => {\n    if (!selectedArtist) {\n      setError(\"Please select an artist.\");\n      return;\n    }\n    setError(\"\");\n    try {\n      const response = await fetch(`http://localhost:8080/artists/${encodeURIComponent(selectedArtist)}/top-genres`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch top genres. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTopGenres(data);\n    } catch (error) {\n      console.error(\"Error fetching top genres for artist:\", error);\n      setError(\"Failed to load top genres for artist.\");\n    }\n  };\n\n  // Fetch artists on page load\n  useEffect(() => {\n    fetchArtists();\n  }, []);\n\n  // Navigate back to the main menu\n  const handleBackToMenu = () => {\n    history.push(\"/\"); // Navigate back to main menu\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main_content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Song of the Day by Genre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"back_button\",\n        onClick: handleBackToMenu,\n        children: \"Back to Main Menu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"top_genres\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFA4 Top Genres for Artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"artist-select\",\n          value: selectedArtist,\n          onChange: e => setSelectedArtist(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select an Artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), artists.map(artist => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: artist.Artist,\n            children: artist.Artist\n          }, artist.ID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchTopGenresByArtist,\n          children: \"Fetch Top Genres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), topGenres.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: topGenres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [genre.genre_name, \" (\", genre.track_count, \" tracks)\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-message\",\n          children: \"No genres found for this artist.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(GenrePage, \"WemgcrdjwoAQAt5YK/vrle/AIqk=\", false, function () {\n  return [useHistory];\n});\n_c = GenrePage;\nvar _c;\n$RefreshReg$(_c, \"GenrePage\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","GenrePage","artists","setArtists","selectedArtist","setSelectedArtist","topGenres","setTopGenres","error","setError","history","fetchArtists","response","fetch","ok","Error","status","data","json","Array","isArray","console","fetchTopGenresByArtist","encodeURIComponent","handleBackToMenu","push","e","target","value","map","artist","Artist","ID","length","genre","index","genre_name","track_count"],"sources":["/Users/zhangfangce/Desktop/CIS-550/website/client/src/pages/GenrePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\"; // For navigation\nimport \"../style/GenrePage.css\";\nimport \"../index.css\";\n\nexport default function GenrePage() {\n  const [artists, setArtists] = useState([]); // State for artist options\n  const [selectedArtist, setSelectedArtist] = useState(\"\"); // Selected artist\n  const [topGenres, setTopGenres] = useState([]); // State for fetched top genres\n  const [error, setError] = useState(\"\"); // Error message\n  const history = useHistory(); // For navigation\n\n  // Function to fetch artists for the dropdown\n  const fetchArtists = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/artists\");\n      if (!response.ok) {\n        throw new Error(`Failed to fetch artists. Status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Assuming artists are in an array\n      if (Array.isArray(data)) {\n        setArtists(data); // Populate the dropdown options\n      } else {\n        throw new Error(\"Invalid response structure: Expected array of artists\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching artists:\", error);\n      setError(\"Failed to load artists.\");\n    }\n  };\n\n  // Function to fetch top genres for a selected artist\n  const fetchTopGenresByArtist = async () => {\n    if (!selectedArtist) {\n      setError(\"Please select an artist.\");\n      return;\n    }\n    setError(\"\");\n    try {\n      const response = await fetch(\n        `http://localhost:8080/artists/${encodeURIComponent(selectedArtist)}/top-genres`\n      );\n      if (!response.ok) {\n        throw new Error(`Failed to fetch top genres. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTopGenres(data);\n    } catch (error) {\n      console.error(\"Error fetching top genres for artist:\", error);\n      setError(\"Failed to load top genres for artist.\");\n    }\n  };\n\n  // Fetch artists on page load\n  useEffect(() => {\n    fetchArtists();\n  }, []);\n\n  // Navigate back to the main menu\n  const handleBackToMenu = () => {\n    history.push(\"/\"); // Navigate back to main menu\n  };\n\n  return (\n    <div id=\"main_content\">\n      {/* Sidebar */}\n      <div id=\"sidebar\">\n        <h1>Your Song of the Day by Genre</h1>\n        <button id=\"back_button\" onClick={handleBackToMenu}>\n          Back to Main Menu\n        </button>\n      </div>\n\n      {/* Main Content */}\n      <div id=\"content\">\n        {/* Top Genres for Artist Section */}\n        <div id=\"top_genres\">\n          <h2>ðŸŽ¤ Top Genres for Artist</h2>\n\n          <select\n            id=\"artist-select\"\n            value={selectedArtist}\n            onChange={(e) => setSelectedArtist(e.target.value)}\n          >\n            <option value=\"\" disabled>\n              Select an Artist\n            </option>\n            {artists.map((artist) => (\n              <option key={artist.ID} value={artist.Artist}>\n                {artist.Artist}\n              </option>\n            ))}\n          </select>\n\n          <button onClick={fetchTopGenresByArtist}>Fetch Top Genres</button>\n\n          {error && <div className=\"error-message\">{error}</div>}\n\n          {topGenres.length > 0 ? (\n            <ul>\n              {topGenres.map((genre, index) => (\n                <li key={index}>\n                  {genre.genre_name} ({genre.track_count} tracks)\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div className=\"loading-message\">No genres found for this artist.</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}