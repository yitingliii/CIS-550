{"ast":null,"code":"var _jsxFileName = \"/Users/zhangfangce/Desktop/CIS-550/website/client/src/pages/GenrePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../style/GenrePage.css\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenrePage() {\n  _s();\n  const [topGenres, setTopGenres] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [selectedArtist, setSelectedArtist] = useState(\"\"); // For the dropdown\n  const [error, setError] = useState(\"\");\n  const [artistError, setArtistError] = useState(\"\");\n\n  // Fetch artists for the dropdown on mount\n  useEffect(() => {\n    const fetchArtists = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/artists\");\n        if (!response.ok) {\n          throw new Error(`Failed to fetch artists. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming artists are in `rows`\n        if (Array.isArray(data.rows)) {\n          setArtists(data.rows);\n        } else {\n          throw new Error(\"Invalid response structure: Expected 'rows' to be an array\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching artists:\", error);\n        setError(\"Failed to load artists.\");\n      }\n    };\n    fetchArtists();\n  }, []);\n\n  // Fetch top genres for the selected artist\n  const fetchTopGenresByArtist = async e => {\n    e.preventDefault();\n    setArtistError(\"\");\n    setTopGenres([]);\n    if (!selectedArtist) {\n      setArtistError(\"Please select an artist.\");\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:8080/artists/${encodeURIComponent(selectedArtist)}/top-genres`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch top genres. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTopGenres(data);\n    } catch (error) {\n      console.error(\"Error fetching top genres for artist:\", error);\n      setArtistError(\"Failed to load top genres for artist.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"page-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"top-genres\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFA4 Top Genres for Artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: fetchTopGenresByArtist,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"artist-select\",\n            value: selectedArtist,\n            onChange: e => setSelectedArtist(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select an Artist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), Array.isArray(artists) && artists.map(artist => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: artist.artist,\n              children: artist.artist\n            }, artist.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"artist-form-buttons\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Fetch Top Genres\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), artistError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: artistError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 27\n        }, this), topGenres.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: topGenres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [genre.genre_name, \" (\", genre.track_count, \" tracks)\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-message\",\n          children: \"No genres found for this artist.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(GenrePage, \"IfO5UzBbDx2VobzJcnTFsevjJDw=\");\n_c = GenrePage;\nvar _c;\n$RefreshReg$(_c, \"GenrePage\");","map":{"version":3,"names":["React","useState","useEffect","GenrePage","topGenres","setTopGenres","artists","setArtists","selectedArtist","setSelectedArtist","error","setError","artistError","setArtistError","fetchArtists","response","fetch","ok","Error","status","data","json","Array","isArray","rows","console","fetchTopGenresByArtist","e","preventDefault","encodeURIComponent","target","value","map","artist","id","length","genre","index","genre_name","track_count"],"sources":["/Users/zhangfangce/Desktop/CIS-550/website/client/src/pages/GenrePage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../style/GenrePage.css\";\nimport \"../index.css\";\n\nexport default function GenrePage() {\n  const [topGenres, setTopGenres] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [selectedArtist, setSelectedArtist] = useState(\"\"); // For the dropdown\n  const [error, setError] = useState(\"\");\n  const [artistError, setArtistError] = useState(\"\");\n\n  // Fetch artists for the dropdown on mount\n  useEffect(() => {\n    const fetchArtists = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/artists\");\n        if (!response.ok) {\n          throw new Error(`Failed to fetch artists. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming artists are in `rows`\n        if (Array.isArray(data.rows)) {\n          setArtists(data.rows);\n        } else {\n          throw new Error(\"Invalid response structure: Expected 'rows' to be an array\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching artists:\", error);\n        setError(\"Failed to load artists.\");\n      }\n    };\n\n    fetchArtists();\n  }, []);\n\n  // Fetch top genres for the selected artist\n  const fetchTopGenresByArtist = async (e) => {\n    e.preventDefault();\n    setArtistError(\"\");\n    setTopGenres([]);\n    if (!selectedArtist) {\n      setArtistError(\"Please select an artist.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `http://localhost:8080/artists/${encodeURIComponent(selectedArtist)}/top-genres`\n      );\n      if (!response.ok) {\n        throw new Error(`Failed to fetch top genres. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTopGenres(data);\n    } catch (error) {\n      console.error(\"Error fetching top genres for artist:\", error);\n      setArtistError(\"Failed to load top genres for artist.\");\n    }\n  };\n\n  return (\n    <div>\n      {/* Page Wrapper */}\n      <div id=\"page-wrapper\">\n        <section id=\"top-genres\">\n          <h2>ðŸŽ¤ Top Genres for Artist</h2>\n          <form onSubmit={fetchTopGenresByArtist}>\n            <select\n              id=\"artist-select\"\n              value={selectedArtist}\n              onChange={(e) => setSelectedArtist(e.target.value)}\n            >\n              <option value=\"\" disabled>\n                Select an Artist\n              </option>\n              {Array.isArray(artists) &&\n                artists.map((artist) => (\n                  <option key={artist.id} value={artist.artist}>\n                    {artist.artist}\n                  </option>\n                ))}\n            </select>\n\n            <div id=\"artist-form-buttons\">\n              <button type=\"submit\">Fetch Top Genres</button>\n            </div>\n          </form>\n          {artistError && <div className=\"error-message\">{artistError}</div>}\n\n          {/* Display top genres */}\n          {topGenres.length > 0 ? (\n            <ul>\n              {topGenres.map((genre, index) => (\n                <li key={index}>\n                  {genre.genre_name} ({genre.track_count} tracks)\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div className=\"loading-message\">No genres found for this artist.</div>\n          )}\n\n          {error && <div className=\"error-message\">{error}</div>}\n        </section>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}