[{"/Users/yiting/Desktop/CIS-550/website/client/src/index.js":"1","/Users/yiting/Desktop/CIS-550/website/client/src/App.js":"2","/Users/yiting/Desktop/CIS-550/website/client/src/pages/SearchPage.js":"3","/Users/yiting/Desktop/CIS-550/website/client/src/pages/HomePage.js":"4","/Users/yiting/Desktop/CIS-550/website/client/src/components/navbar.js":"5"},{"size":458,"mtime":1732224070102,"results":"6","hashOfConfig":"7"},{"size":671,"mtime":1732391501830,"results":"8","hashOfConfig":"7"},{"size":4876,"mtime":1732391495107,"results":"9","hashOfConfig":"7"},{"size":1169,"mtime":1732225472164,"results":"10","hashOfConfig":"7"},{"size":1246,"mtime":1732388129434,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"109g1pz",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yiting/Desktop/CIS-550/website/client/src/index.js",[],[],"/Users/yiting/Desktop/CIS-550/website/client/src/App.js",[],[],"/Users/yiting/Desktop/CIS-550/website/client/src/pages/SearchPage.js",["28"],[],"import React, { useState, useEffect } from \"react\";\nimport \"../style/SearchPage.css\";\nimport \"../index.css\";\n\nexport default function SearchSong() {\n  const [genres, setGenres] = useState([]); \n  const [selectedGenre, setSelectedGenre] = useState(\"\"); \n  const [songs, setSongs] = useState([]);\n  const [numResults, setNumResults] = useState(0);\n  const [error, setError] = useState(\"\");\n  const [term, setTerm] = useState(\"\"); \n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/genres\"); // API endpoint\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch genres\");\n        }\n        const data = await response.json();\n        setGenres(data);\n        setSelectedGenre(data[0]?.Genre || \"\"); // Default to the first genre\n      } catch (err) {\n        console.error(err);\n        setError(\"Failed to load genres\");\n      }\n    };\n\n    fetchGenres();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSongs([]);\n    setNumResults(0);\n\n    if (!selectedGenre) {\n      setError(\"Please select a genre.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`http://localhost:8080/tracks/genre/${selectedGenre}`);\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch songs\");\n      }\n      const data = await response.json();\n      setSongs(data);\n      setNumResults(data.length);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    }\n  };\n\n\n  return (\n    <div>\n      {/* Navigation Bar */}\n      <div id=\"navbar\">\n        <ul>\n          <li><a href=\"http://localhost:3000/\">HomePage</a></li>\n          <li>Sound Lab</li>\n          <li>Genre</li>\n          <li>Collaboration</li>\n        </ul>\n      </div>\n\n      {/* Page Wrapper */}\n      <div id=\"page-wrapper\">\n          {/* Search Form */}\n          <form id=\"search-form\" onSubmit={handleSubmit}>\n            <label htmlFor=\"genre-select\"></label>\n\n            {/* Dropdown for Genre Selection */}\n            <select\n              id=\"genre-select\"\n              value={selectedGenre}\n              onChange={(e) => setSelectedGenre(e.target.value)}\n            >\n              {genres.map((genre) => (\n                <option key={genre.ID} value={genre.Genre}>\n                  {genre.Genre}\n                </option>\n              ))}\n            </select>\n\n            {/* Input for Results Limit */}\n            <input\n              type=\"number\"\n              placeholder=\"5 results\"\n              value={term}\n              onChange={(e) => setTerm(e.target.value)}\n            />\n\n            {/* Search Button */}\n            <button type=\"submit\">Search</button>\n          </form>\n\n          {/* Error Message */}\n          {error && <p className=\"error\">{error}</p>}\n\n          {/* Results Message */}\n          {numResults > 0 && (\n            <p>\n              Found <span id=\"num-results\">{numResults}</span> result(s).\n            </p>\n          )}\n\n          {/* Search Results */}\n          {/* <div id=\"search-results\">\n              {songs.map((song) => (\n                <div key={song.track_id} className=\"song-item\">\n                  <h3>{song.title}</h3>\n                  <p>Release Date: {song.release_date}</p>\n                  <a href={song.track_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Listen\n                  </a>\n                </div>\n              ))}\n            </div>\n            <div id=\"search-results\">\n              <table id=\"results-table\">\n                <thead>\n                  <tr>\n                    <th>Track ID</th>\n                    <th>Title</th>\n                    <th>URL</th>\n                    <th>Release Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {songs.length > 0 ? (\n                    songs.map((song) => (\n                      <tr key={song.track_id}>\n                        <td>{song.track_id}</td>\n                        <td>{song.title}</td>\n                        <td>\n                          <a\n                            href={song.track_url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            Listen\n                          </a>\n                        </td>\n                        <td>{song.release_date}</td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan=\"4\" style={{ textAlign: \"center\" }}>\n                        No results found. Try a different genre or limit.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div> */}\n\n        </div>\n      </div>\n  );\n}\n","/Users/yiting/Desktop/CIS-550/website/client/src/pages/HomePage.js",[],[],"/Users/yiting/Desktop/CIS-550/website/client/src/components/navbar.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":8,"column":10,"nodeType":"31","messageId":"32","endLine":8,"endColumn":15},"no-unused-vars","'songs' is assigned a value but never used.","Identifier","unusedVar"]